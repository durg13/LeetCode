Shortest Distance from All Buildings
You are given an m x n grid grid of values 0, 1, or 2, where:
each 0 marks an empty land that you can pass by freely,
each 1 marks a building that you cannot pass through, and
each 2 marks an obstacle that you cannot pass through.
You want to build a house on an empty land that reaches all buildings in the shortest total travel distance. You can only move up, down, left, and right.

Return the shortest travel distance for such a house. If it is not possible to build such a house according to the above rules, return -1.
The total travel distance is the sum of the distances between the houses of the friends and the meeting point.
The distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.

Example 1:
Input: grid = [[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]]
Output: 7
Explanation: Given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2).
The point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal.
So return 7.

Example 2:
Input: grid = [[1,0]]
Output: 1
Example 3:

Input: grid = [[1]]
Output: -1
 
Constraints:
m == grid.length
n == grid[i].length
1 <= m, n <= 50
grid[i][j] is either 0, 1, or 2.
There will be at least one building in the grid.


---------------------------------------------------------------------------

class Solution {
    public int shortestDistance(int[][] grid) {
        // Do BFS from each house, BFS will work here as we need to find the min distance for the empty from the house
        // mark all the empty cells which can be visited by this house and consider these cells only for the second house
        
         int[] dirx = {1,-1,0,0};
         int[] diry = {0,0,1,-1};
         int[][] res = new int[grid.length][grid[0].length];
         int emptyCell = 0;
         int minDist = Integer.MAX_VALUE; 
          for(int i =0; i < grid.length ; i++){
            for(int j =0; j < grid[0].length ; j++){
                if(grid[i][j] == 1){
                    Queue<int[]> queue = new LinkedList<>();
                    queue.offer(new int[]{i, j});
                    int steps = 1;
                    minDist = Integer.MAX_VALUE; // max value for this house
                    while(!queue.isEmpty()){
                        int size = queue.size();
                        for(int l = size; l > 0; l--){
                           int[] index = queue.poll();
                           for(int k = 0; k <= 3; k++){
                                int row = index[0]+dirx[k];
                                int col = index[1]+diry[k];
                                if(row >= 0 && row < grid.length && col >= 0 && col < grid[0].length && grid[row][col] == emptyCell){
                                    res[row][col] += steps;
                                    grid[row][col] = emptyCell-1;
                                    queue.offer(new int[]{row, col});
                                    minDist = Math.min(minDist, res[row][col]);
                                }
                            }
                        }
                        steps++;
                    }
                     emptyCell--;
                }
            }
         }
        return minDist == Integer.MAX_VALUE ? -1 : minDist;
    }
}
