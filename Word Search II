Word Search II
Given an m x n board of characters and a list of strings words, return all words on the board.

Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring.
The same letter cell may not be used more than once in a word.

Example 1:
Input: board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]

Example 2:
Input: board = [["a","b"],["c","d"]], words = ["abcb"]
Output: []
 
Constraints:
m == board.length
n == board[i].length
1 <= m, n <= 12
board[i][j] is a lowercase English letter.
1 <= words.length <= 3 * 104
1 <= words[i].length <= 10
words[i] consists of lowercase English letters.
All the strings of words are unique.

--------------------------
class Solution {
    class TrieNode{
        boolean isWord;
        TrieNode[] children;    
        TrieNode(){
            this.children = new TrieNode[26];
        }
    }
    
    class Trie{ 
        TrieNode root;
        Trie(){
            this.root = new TrieNode();
        }
        
        void insert(String s){
            TrieNode curr = root;
            for(char c : s.toCharArray()){
                if(curr.children[c-'a'] == null){
                    curr.children[c-'a'] = new TrieNode();
                }
                curr = curr.children[c-'a'];
            }
            curr.isWord = true;
        }   
    }
    
    public List<String> findWords(char[][] board, String[] words) {
        // insert all the words in the trie
        Trie trie = new Trie();
        for(String s : words){
            trie.insert(s);
        }
        
        List<String> result = new ArrayList<>();
        //iterate over each cell of the matrix and find the words.
        for(int i =0; i<board.length; i++){
            for(int j=0; j<board[0].length; j++){
                if(trie.root.children[board[i][j]-'a'] != null){
                    searchWords(i,j,board, result, trie.root.children[board[i][j]-'a'], String.valueOf(board[i][j]));
                }
            }
        }
        
        return result;
    }
    
        void searchWords(int row, int col, char[][] board, List<String>result, TrieNode node, String s){
            int[] x = {1,-1,0,0};
            int[] y = {0, 0, 1, -1};
            if(node.isWord) {
                result.add(s);
                // once you add the word remove the word from the trie. You don't want the word to be counted twice.
                node.isWord = false;
            }
            
            // mark the cell as visited
            char letter = board[row][col];
            board[row][col] = '#';
            // check all directions
            for(int i =0; i<4; i++){
                int newx = row+x[i];
                int newy = col+y[i];
                if(newx >= 0 && newx < board.length && newy >=0 && newy <board[0].length
                  && board[newx][newy] != '#' && node.children[board[newx][newy]-'a'] != null )
                {
                    searchWords(newx, newy, board, result, node.children[board[newx][newy]-'a'], s+board[newx][newy]);
                }
            }
            // remove the cell as visited
            board[row][col] = letter;
        }
}
